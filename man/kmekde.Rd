% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kmekde.R
\name{kmekde}
\alias{kmekde}
\title{The "kmcure" function call this function that accept matrix inputs to fits AFT Semiparametric Mixture Cure Model using the KME-KDE method}
\usage{
kmekde(
  time,
  event,
  survPreds,
  curePreds = NULL,
  multiOptim_maxit = 1,
  multiOptim_reltol = 0.001,
  multiOptim_stopTime = NULL,
  multiOptim_stopLLp = 0,
  optim_reltol = 1e-08,
  optim_maxit = 500,
  silent = FALSE,
  conditional = FALSE,
  cond_reltol = 1e-08,
  cond_maxit = 250,
  cond_reltol_beta = 1e-08,
  cond_maxit_beta = 500,
  cond_reltol_gamma = 1e-05,
  cond_maxit_gamma = 50,
  fix_gammacoef = NULL,
  fix_betacoef = NULL,
  bandcoef = 1,
  try_hessian = FALSE,
  optim_method = "Nelder-Mead",
  optim_init = NULL
)
}
\arguments{
\item{time}{is the observed time to event variable}

\item{event}{is the status variable: 1 for event and 0 for censoring}

\item{survPreds}{is the matrix of survival predictor variable(s)}

\item{curePreds}{is the (optional) matrix of curing predictor variable(s)}

\item{multiOptim_maxit}{is the maximum of allowed multiple optimization. If the convergence of "optim" does not meet, the program does multiple optimization.}

\item{multiOptim_reltol}{is the relative tolerance in continuing multiple optimization procedure}

\item{multiOptim_stopTime}{is an optional time limit to stop multi-optimization based on calculation time per minutes}

\item{multiOptim_stopLLp}{is an extra option for stopping multi-optimization based on the proportion of log-likelihood successive changes in multi-optimization. It is a value between 0 to 1 where for example, 0 disable this stopping rule, and 0.1 stop multi-optimization when the difference in the latest loglik runs becomes less or equal to 0.1 of difference between loglik values in the first and second "optim" runs.}

\item{optim_reltol}{is the relative tolerance in continuing of each optimization}

\item{optim_maxit}{is the maximum of allowed iterations in each optimization}

\item{silent}{a Boolean value which if set to TRUE it prevent from showing output messages}

\item{conditional}{a Boolean value which, if set to TRUE it uses a conditional procedure to iterative estimate parameters of survival and cure sub-models conditional on the last estimation of the other part}

\item{cond_reltol}{is the relative tolerance in continuing the conditional algorithm optimization}

\item{cond_maxit}{is the maximum of allowed iterations in the conditional algorithm optimization}

\item{cond_reltol_beta}{is the relative tolerance in continuing optimization of the beta part in the conditional algorithm}

\item{cond_maxit_beta}{is the maximum of allowed iterations in the optimization of the beta part in the conditional algorithm}

\item{cond_reltol_gamma}{is the relative tolerance in continuing optimization of the gamma part in the conditional algorithm}

\item{cond_maxit_gamma}{is the maximum of allowed iterations in the optimization of the gamma part in the conditional algorithm}

\item{fix_gammacoef}{is an optional vector of fix gamma coefficients that could be used to estimate beta coefficients based of them. This can be used for conditional optimization.}

\item{fix_betacoef}{is an optional vector of fix beta coefficients that could be used to estimate gamma coefficients based of them. This can be used for conditional optimization.}

\item{bandcoef}{is an optional coefficient to multiply the optimal kernel smoothing band-width (Please note the loglik values resulted by applying different "bandcoef" are not comparable. So, changing the default value of this option is Not recommended.)}

\item{try_hessian}{is a Boolean with default value of FALSE. If this set to TRUE, the Hessian matrix will be evaluated after last optimization by applying a final optimization that also try to estimate the hessian matrix}

\item{optim_method}{is the method of optimization: "Nelder-Mead" and "SANN" are supported}

\item{optim_init}{is an optional vector of initial values to be used in continuing optimization of previously estimated coefficients by optionally providing them as initial values.}
}
\value{
a list of "exitcode" (0: no warning or error, 1: warning, 2 or 3: error), "coef" (estimated coefficients), "AIC", etc. check names(fit) for more information.
}
\description{
Fits AFT (Accelerated Failure Time) Semiparametric Mixture Cure Model using the KME-KDE (Kaplan-Meier Estimation and Kernel Density Estimator) method where inputs data be provided as matrices.
}
\examples{
data(hfp)

fit1 = kmekde (time=hfp[,1], event=hfp[,2], survPreds=hfp[,-(1:2)], curePreds=hfp[,-(1:2)])

names(fit1)

if(fit1$exitcode==0){
print(fit1$loglik)
print(fit1$timeD)
# print(fit1$coef)
}

fit2 = kmekde (time=hfp[,1], event=hfp[,2], survPreds=hfp[,-(1:2)], curePreds=hfp[,-(1:2)],
               conditional=TRUE)
print(fit2$exitcode)
print(fit2$loglik)
print(fit2$timeD)
# print(fit2$coef)

fit3 = kmekde (time=hfp[,1], event=hfp[,2], survPreds=hfp[,-(1:2)], curePreds=hfp[,-(1:2)],
               multiOptim_maxit = 5)
print(fit3$exitcode)
print(fit3$loglik)
print(fit3$timeD)
# print(fit3$coef)

fit4 = kmekde (time=hfp[,1], event=hfp[,2], survPreds=hfp[,-(1:2)], curePreds=hfp[,-(1:2)],
               multiOptim_maxit = 5, optim_init = fit3$coef)
print(fit4$exitcode)
print(fit4$loglik)
print(fit4$timeD)
# print(fit4$coef)

# fit5 = kmekde (time=hfp[,1], event=hfp[,2], survPreds=hfp[,-(1:2)], curePreds=hfp[,-(1:2)],
#                multiOptim_maxit = 500, multiOptim_stopTime = 10) # limit run to 10 minutes
# print(fit5$exitcode)
# print(fit5$loglik)
# print(fit5$timeD)
# print(fit5$coef)

}
